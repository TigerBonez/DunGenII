var e = document.getElementById("dunbio");

function randomNumber(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

// Lists
const OracleList = ["üö´ Absolute no\nWhat you asked will NOT happen any time soon.", "‚ùó No, and intervention\nNo, and something intervenes with the moment.",
"‚ùå No", "üéà No, but...\nNo, though something isn't usual, ask a followup question.", "üéà Yes, but...\nYes, though something isn't usual, ask a followup quesion",
"‚úî Yes", "‚ùó Yes, and intervention\nYes, and something intervenes with the moment.", "‚úÖ Absolute yes\nWhat you asked will most certainly happen to extreme effect."];

const Interventions = ["‚ûï New Entity", "üîº Entity Positive", "üîΩ Entity Negative", "‚ú® Party Positive", "üß® Party Negative", "üìú Advance Plotpoint or Quest", "üìú Obstacle in Plotpoint or Quest", 
"üÉè Wildcard (Use RWG)", "üéé Remote Event"];

const rwgAction = ["Attainment", "Starting", "Negclect", "Fight", "Recruit", "Triumph", "Release", "Befriend", "Judge", "Desert", "Dominate", "Procrastinate", "Expose", "Haggle", "Imprison",
"Release", "Celebrate", "Develop", "Oppress", "Inspect", "Ambush", "Spy", "Attach", "Carry", "Excitement","Activity", "Assist", "Care", "Negligence", "Passion", "Violate", "Oppose",
"Malice", "Communicate", "Persecute", "Increase", "Decrease", "Abandon", "Gratify", "Praise", "Separate", "Take", "Break", "Heal", "Delay", "Stop", "Lie", "Return", "Travel", "Block",
"Harm", "Debase", "Overindulge", "Adjourn", "Adversity", "Kill", "Disrupt", "Open", "Carelessness", "Ruin", "Extravagance", "Trick", "Arrive", "Propose", "Divide", "Refuse", "Work Hard",
"Control", "Attract", "Failure", "Pursue", "Vengeance", "Proceedings", "Dispute", "Punish", "Inquire", "Antagonise", "Move", "Waste", "Truce", "Immitate", "Struggle", "Inform", "Bestow",
"Postpone", "Usurp", "Create", "Betray", "Agree", "Abuse", "Mistrust", "Deceive", "Cruelty", "Intolerance", "Trust", "Guide", "Transform", "Overthrow", "Oppress", "Change", "Advise",
"Obtain", "Attempt", "Spoil", "Interact", "Abduct", "Promote", "Blight", "Progress", "Distress", "Record", "Embrace", "Contact", "Abuse", "Review", "Aid", "Guard", "Conquer", "Plunder",
"Administer", "Discover", "Damage", "Publicize", "Defile", "Join", "Offend", "Learn", "Guide", "Report", "Steal", "Operate", "Overthrow"];

const rwgSubject = ["Goals", "Dreams", "Environment", "Outside", "Inside", "Reality", "Allies", "Enemies", "Messages", "Energy", "Balance", "Tension", "Friendship", "The physical", "A project",
"Pleasures", "Advice", "A plot", "Competition", "Prison", "Illness", "Food", "Attention", "Success", "Death", "Disruption", "Power", "A burden", "Intrigues", "Fears", "Ambush", "Rumor",
"Victory", "Dispute", "Riches", "Status quo", "Technology", "Hope", "Magic", "Illusions", "Evil", "Good", "Emotions", "Opposition", "War", "Peace", "The innocent", "Love", "The spiritual",
"Pain", "Possessions", "Benefits", "Plans", "Lies", "Expectations", "Legal matters", "Bureaucracy", "Business", "Failure", "Travel", "Jealousy", "Dispute", "Home", "Investment", "Suffering",
"Wishes", "Tactics", "Wounds", "Extravagance", "A representative", "Adversities", "Opulence", "Liberty", "Military", "The mundane", "Trials", "Portals", "Danger", "Weapons", "Animals",
"Weather", "Elements", "Nature", "The public", "Leadership", "The intellectual", "New ideas", "Joy", "A path", "News", "Exterior factors", "Stalemate", "Randomness", "Misfortune", "Masses",
"Vehicle", "Art", "Fame", "Anger", "Information", "Wealth", "Hardship", "Resources", "Poverty", "Success", "Music", "Literature", "Alcohol", "Medicines", "Beauty", "Strength",
"Intelligence", "The Wealthy", "The Populous", "Enemies", "The Public", "The Poor", "The Family", "The Elite", "Academia", "The Forsaken", "The Law", "The Government", "The Oppressed",
"Criminals", "Secret Societies", "The World", "Military", "Dreams"];

const Expects = ["üëì Increase Simple Element", "üï∂ Decrease simple Element", "‚ûï Add Simple Element", "‚ûñ Remove Simple Element", "üëì Increase Major Element", "üï∂ Decrease Major Element", 
"‚ûï Add Major Element", "‚ûñ Remove Major Element", "üÉè Positive Wildcard (Use RWG)", "üÉè Negative Wildcard (Use RWG)"];

const volcanicDangers = ["Lava pit", "Lava geyser", "Burning area"];

const iceDangers = ["Slippery floor", "Ice spikes"];

const desertDangers = ["Quicksand pit", "Weak sand flooring"];

const waterDangers = ["Fully flooded room", "Partially flooded room", "High-speed stream of water"];

const genericDangers = ["Spikefall", "Pitfall", "Pool of water", "Ravine", "Fog/Haze", "Pool of acid", "Rubble", "Excessive plants", "Excessive cobwebs", "Brown Mold", "Acid Mold",
"Poison Mold"];

const pois = ["Old bookshelf", "Old box", "Strangely colored rock", "Structural pillar", "Statue of someone", "Statue of a monster", "Trap door", "Odd symbols on the wall", "Odd symbols on the floor", "Tombstone",
"Creature remains", "Big lever on the wall", "Waterfall", "Abandoned tent", "Abandoned campfire", "Window to another room", "Strange altar", "Cage",
"Obsidian pillar", "Lavafall", "Burnt remains", "Heated stone", "Charred objects", "Frozen remains", "Frozen object", "Ice pillar", "Giant icicle", "Clear puddle of water",
"Sandstone pillar", "Sand streaming from ceiling", "Sand streaming from wall", "Pile of loose sand", "Eroded rock","Waterfall pillar", "Stream of water from ceiling", "Small waterfall", "Drowned creature"];

const hiddenPois = ["Hidden switch", "Hidden trap door on floor", "Secret entrance on wall", "Trap door on ceiling", "Odd symbols on ceiling", "Strange etching in walls", "Claw marks", "Water dripping from above",
"Several insects", "Crawlspace", "Scorch marks", "Urn", "Scrap wood", "Hidden chest"];

const randomQuote = ["Haha, haha, one!", "I've come to make an announcement, Shadow The Hedgehog's a bitch-ass motherfucker!", "You fool, I have 70 ALTERNATIVE ACCOUNTS!", "WHO posted my NUDES on TWITTER DOT COM?!",
"How do you like that, Obama?!", "Put the piss rock in the nuclear reactor!", "Za Warudo!", "Count how many sand is here, Omega.", "But my IQ IS TOO HIGH!"];

const townSizeList = ["Camp", "Small Village", "Large Village", "Small Town", "Large Town", "Small City", "Large City"];

const notableTraits = ["Canals in place of streets", "Massive statue or monument", "Grand temple", "Large fortress", "Verdant parks and orchards", "River divides town", "Major trade center", 
"Headquarters of a powerful family or  guild", "Population mostly wealthy", "Destitute, rundown", "Awful smell", "Center of trade for one specific good", "Site of many battles", "Site of a mythic or magical event", 
"Important library or archive", "Worship of all gods banned", "Sinister reputation", "Notable library or academy", "Site of important tomb or graveyard", "Built atop ancient ruins"];

const knownBy = ["Delicious cuisine", "Rude people", "Greedy merchants", "Artists and writers", "Great hero/savior", "Flowers", "Hordes of beggars", "Tough warriors", "Dark magic", "Decadence", "Piety", "Gambling",
"Godlessness", "Education", "Wines", "High fashion", "Political intrigue", "Powerful guilds", "Strong drink", "Patriotism"];

const calamities = ["Suspected vampire infestation", "New cult seeks converts", "Important figure died (murder suspected)", "War between rival thieves' guilds", "Plague or famine (sparks riots)", "Corrupt officials",
"Marauding monsters", "Powerful wizard has moved into town", "Economic depression (trade disrupted)", "Flooding", "Undead stirring in cemetaries", "Prophecy of doom", "Brink of war", "Anarchy", "Besieged by enemies",
"Scandal threatens powerful families", "Dungeon discovered", "Religious sects struggle for power", "Recently suffered mass destruction"];

const residences = ["Abandoned squat", "Low-class home", "Middle-class home", "Upper-class home", "Crowded tenement", "Orphanage", "Hidden slavers' den", "Front for a secret cult", 
"Lavish, guarded mansion", "Apartment complex", "Low-class Hotel", "Fancy Hotel"];

const religiouses = ["Temple to a good or neutral deity", "Temple to a false deity", "Home of ascetics", "Abandoned shrine", "Library dedicated to religious study", "Hidden shrine to a fiend or evil deity",
"Cleric's healing house"];

const tavType = ["Quiet, low-key bar", "Raucous dive", "Thieves' guild hangout", "Gathering place for a secret society", "Upper-class dining club", "Gambling den", "Caters to specific race or guild", 
"Members-only club", "Brothel", "Great drinking hall", "Entertainer's Club"];

const tavName1 = ["The Silver ", "The Golden ", "The Staggering ", "The Laughing ", "The Prancing ", "The Gilded ", "The Running ", "The Howling ", "The Slaughtered ", "The Leering ", "The Drunken ", "The Leaping ", 
"The Roaring ", "The Frowning ", "The Lonely ", "The Wandering ", "The Mysterious ", "The Barking ", "The Black ", "The Gleaming ", "The Yapping ", "The Exploding "];

const tavName2 = ["Eel", "Dolphin", "Dwarf", "Pegasus", "Pony", "Rose", "Stag", "Wolf", "Lamb", "Demon", "Goat", "Spirit", "Horde", "Jester", "Mountain", "Eagle", "Satyr", "Dog", "Spider", "Star", "Duende",
"Oat", "Toilet", "Goose"];

const warehouses = ["Empty or abandoned", "Heavily guarded, expensive goods", "Cheap goods", "Bulk goods", "Live animals", "Weapons/armor", "Goods from a distant land", "Secret smuggler's den"];

const shopTypes = ["Pawnshop", "Herbs/Incense", "Fruits/Vegetables", "Dried meats", "Pottery", "Undertaker", "Books", "Moneylender", "Weapons/armor", "Chandler", "Smithy", "Carpenter", "Weaver", "Jeweler", "Baker",
"Mapmaker", "Tailor", "Ropemaker", "Mason", "Scribe", "Antique shop", "Barber shop", "Caf√©", "Diner", "Alchemist's Shop", "Wizard's Shop", "Cleaners", "Candy shop", "Corner Store",
"Liquor Store", "Shopping mall"];

const travelBiomes = ["üåæ Grassy plains", "üíπ Hilly plains", "üå∑ Flower plains", "üíß River plains", "üê∏ Swamp", "üå≥ Normal forest", "üåô Dark forest", "üëª Haunted forest", "üå¥ Palm forest", 
"üßö Fey forest", "‚¨Ü Giant forest", "ü¶á Jungle", "‚ùÑ Snowy tundra", "üèú Desert", "üåµ Badlands", "ü¶í Savannah", "üçÑ Mushroom fields", "‚õ∞ Rocky mountains", "üåÑ Steep cliffs", "üèî Frozen mountains", "üåã Volcanic land", 
"ü•å Canyons", "üèñ Beach", "üßü Corrupt land", "üëø Crimson land", "üåü Glowing mushroom zone", "üî´ Nevadan desert", "ü¶Ñ Hallow land", "üîÆ Crystal crags", "‚ô® Hot springs", "ü¶¥ Bonelands", "‚ò£ Toxic marsh",
"‚ò† Dead forest", "üçÇ Autumnal valley", "üèù Floating lands", "üî• Fire plane riftlands", "üåä Water plane riftlands", "üå™ Air plane riftlands", "üíé Earth plane riftlands"];

const caveBiomes = ["‚õè Rocky underground", "‚¨á Deepslate caverns", "üßä Ice caves", "‚åõ Sand caves", "ü•Ä Lush caves", "üçÑ Glowing mushroom caves", "üåã Magma caves", "üíé Crystalline caves", 
"üçñ Rotted depths (Corrupt caves)", "ü©∏ Gore biome (Crimson caves)", "üî≤ Granite caverns", "üî≥ Marble caverns", "üíÄ Catacombs", "üçá Moss biome", "üèú Subterranean desert", "üåø Subterranean jungle", 
"üî• Subterranean volcano", "üíß Deep lake", "‚¨õ The empty", "‚ö† (You fall into the underdark)"];

const raceRelations = ["Harmony", "Tension or Rivalry", "Racial majority are conquerors", "Racial minority are rulers", "Racial minority are refugees", "Racial majority oppresses minority",
"Racial minority oppresses majority"];

const rulerStatus = ["Respected, fair, and just", "Feared tyrant", "Weakling manipulated by others", "Illegitimate ruler, simmering civil war", "Ruled or controlled by a powerful monster",
"Mysterious anonymous cabal", "Contested leadership, open fighting", "Cabal seized power openly", "Doltish lout", "On deathbed; claimants compete for power", "Iron-willed, but respected",
"Religious leader"];

const npcTude = ["üôÇ Friendly", "üòê Neutral", "üò† Hostile", "ü¶∂ Avoidant", "üòà Dangerous", "‚ô• Beloved", "üëä Hated", "üëÄ Cautious", "üí¨ Helpful", "üîé Curious", "ü§® Suspicious"];

const npcModifier = ["Superfluous", "Addicted", "Conformist", "Nefarious", "Sensible", "Untrained", "Romantic", "Unreasonable", "Skilled", "Neglectful", "Lively", "Forthright", "Idealistic",
"Unsupportive", "Rational", "Coarse", "Foolish", "Cunning", "Delightful", "Miserly", "Inept", "Banal", "Logical", "Subtle", "Reputable", "Wicked", "Lazy", "Pessimistic", "Solemn", "Habitual",
"Meek", "Helpful", "Unconcerned", "Generous", "Docile", "Cheery", "Pragmatic", "Serene", "Thoughtful", "Hopeless", "Pleasant", "Insensitive", "Titled", "Inexperienced", "Prying", "Oblivious",
"Refined", "Indespensable", "Scholarly", "Conservative", "Uncouth", "Willful", "Indifferent", "Fickle", "Elderly", "Sinful", "Naive", "Privileged", "Glum", "Likable", "Lethargic", "Defiant",
"Obnoxious", "Insightful", "Tactless", "Fanatic", "Plebian", "Childish", "Pious", "Uneducated", "Inconsiderate", "Cultured", "Revolting", "Curious", "Touchy", "Needy", "Dignified", "Pushy",
"Kind", "Corrupt", "Jovial", "Shrewd", "Liberal", "Compliant", "Destitute", "Conniving", "Careful", "Alluring", "Defective", "Optimistic", "Affluent", "Despondent", "Mindless", "Passionate",
"Devoted", "Established", "Unseemly", "Dependable", "Righteous", "Confident"];

const npcNoun = ["Gypsy", "Witch", "Merchant", "Expert", "Commoner", "Judge", "Ranger", "Occultist", "Reverend", "Thug", "Drifter", "Journeyman", "Statesman", "Astrologer", "Duelist",
"Jack-of-all-trades", "Aristocrat", "Preacher", "Artisan", "Rogue", "Missionary", "Outcast", "Mercenary", "Caretaker", "Hermit", "Orator", "Chieftain", "Pioneer", "Burglar", "Vicar", "Officer",
"Explorer", "Warden", "Outlaw", "Adept", "Bum", "Sorcerer", "Laborer", "Master", "Ascendant", "Villager", "Magus", "Conscript", "Worker", "Actor", "Herald", "Highwayman", "Fortune-hunter",
"Governor", "Scrapper", "Monk", "Homemaker", "Recluse", "Steward", "Polymath", "Magician", "Traveler", "Vagrant", "Apprentice", "Politician", "Mediator", "Crook", "Civilian", "Activist",
"Hero", "Champion", "Cleric", "Slave", "Gunman", "Clairvoyant", "Patriarch", "Shopkeeper", "Crone", "Adventurer", "Soldier", "Entertainer", "Craftsman", "Scientist", "Ascetic", "Superior",
"Performer", "Magister", "Serf", "Brute", "Inquisitor", "Lord", "Villain", "Professor", "Servant", "Charmer", "Globetrotter", "Sniper", "Courtier", "Priest", "Tradesman", "Hitman", "Wizard",
"Beggar", "Tradesman", "Warrior"];

const npcPowerLevel = ["Much weaker than party", "Slightly weaker than party", "Comparable to party", "Slightly stronger than party", "Much stronger than party"];

const npcStrength = ["Strength", "Dexterity", "Constitution", "Intelligence", "Wisdom", "Charisma"];

const npcWeakness = ["Strength", "Dexterity", "Constitution", "Intelligence", "Wisdom", "Charisma"];

const npcFocus = ["Current Scene", "Parents", "Wealth", "Skills", "Campaign", "Allies", "Flaws", "Experience", "Community", "Current Story", "Weapons", "Last Story", "History", "Relics",
"Superiors", "Future Action", "Last Scene", "Antagonist", "Knowledge", "Treasure", "Family", "A Past Scene", "Equipment", "Retainers", "Last Action", "Fame", "Friends", "Contacts",
"Rewards", "A Recent Scene", "A Party Member/Main Character", "Power", "Enemy", ];

const npcCommonRaces = ["Dwarf (Common)", "Dwarf (Hill)", "Dwarf (Mountain)", "Elf (Common)", "Elf (High)", "Elf (Wood)", "Elf (Dark)", "Hobbit (Common)", "Hobbit (Lightfoot)",
"Hobbit (Stout)", "Human (European-like)", "Human (Asian-like)", "Human (African-like)", "Human (Polynesian-like)", "Human (Native-like)", "Human (Indian-like)", "Human (Middle Eastern-like",
"Human (Mixed Race)", "Dragonborn (Blue)", "Dragonborn (Green)", "Dragonborn (Red)", "Gnome (Common)", "Gnome (Forest)", "Gnome (Rock)", "Elfborn", "Orcborn", "Tiefling"];

const npcRareRaces = ["Dragonborn (Black)", "Dragonborn (Brass)", "Dragonborn (Bronze)", "Dragonborn (Copper)", "Dragonborn (Gold)", "Dragonborn (Silver)", "Dragonborn (White)", "Aarakocra",
"Aasimar", "Elf (Astral)", "Gnome (Automaton)", "Bugbear (Civil)", "Catfolk", "Centaur", "Changeling", "Gnome (Deep)", "Dhampir", "Duergar", "Eladrin", "Fairy", "Firbolg",
"Dragonborn (Crystal)", "Genasi", "Giff", "Gith", "Githyanki", "Githzerai", "Goblin (Civil)", "Duende", "Giant (Hill, Civil)", "Goliath", "Hadozee", "Hagborn", "Harengon", "Hexblood", "Hobgoblin",
"Human (Revenant)", "Kalashtar", "Kenku", "Kobold (Civil)", "Leonin", "Lizardfolk", "Loxodon", "Mind Flayer (Civil)", "Minotaur (Civil)", "Orc (Civil)", "Owlfolk", "Owlin", "Plasmoid",
"Rabbitfolk", "Reborn", "Satyr", "Faun", "Elf (Sea)", "Shadar-Kai", "Shifter", "Simic Hybrid", "Tabaxi", "Thri-kreen", "Tiefling (Infernal)", "Tortle", "Triton", "Vampire", "Vedalken",
"Viashino", "Warforged", "Wolfborn", "Yuan-Ti"];

const npcClasses = ["‚öí Barbarian", "üé∏ Bard", "üíä Cleric", "üå≥ Druid", "‚öî Fighter", "ü§õ Monk", "üå© Paladin", "üèπ Ranger", "üî™ Rogue", "üî• Sorcerer", "üëÅ Warlock", "üìú Wizard", "‚öô Artificer",
"ü©∏ Blood Hunter", "üîÆ Mystic", "üöó Artificer: Greaser", "üöó Barbarian: Athlete", "üöó Rogue: Gambler", "üöó Rogue: Skater", "üöó Wizard: Cybermancy"];

const npcVisuals = ["Distinctive jewelry", "Piercings", "Flamboyant or Outlandish clothes", "Formal, clean clothes", "Ragged, dirty clothes", "Pronounced Scar", "Missing Teeth", "Missing Fingers",
"Unusual Eye Color", "Tattoos", "Birthmark", "Unusual skin color", "BALD BALD", "Braided Beard or Hair", "Unusual Hair Color", "Nervous eye twitch", "Distinctive nose", "Distinctive posture",
"Exceptionally beautiful", "Exceptionally ugly"];

const npcPersonalities = ["Flirtatious", "Curious", "Nervous", "Vulgar", "Gentle", "Snobbish", "Generous", "Pessimistic", "Secretive", "Barbaric", "Friendly", "Intellectual", "Humorless", "Gloomy",
"Careless", "Honest", "Proud", "Optimistic", "Cruel", "Cheerful"];

const alignment = ["üõ° Lawful Good", "üõ° Neutral Good", "üõ° Chaotic Good", "‚ú® Lawful Neutral", "‚ú® True Neutral", "‚ú® Chaotic Neutral", "üëø Lawful Evil", "üëø Neutral Evil", "üëø Chaotic Evil"];

const randomItems = ["Abacus", "Vial (Acid)", "Flask (Alchemist's Fire)", "10 Arrows", "10 Blowgun Needles", "10 Crossbow Bolts", "10 Sling Bullets", "Vial (Antitoxin)", "Crystal", "Orb",
"Rod", "Staff", "Wand", "Backpack", "100 Ball Bearings", "Barrel", "Basket", "Bedroll", "Bell", "Blanket", "Block and Tackle", "Book", "Bottle (Empty)", "Bucket", "10 Caltrops", "Candle",
"Ammo Case", "Scroll Case", "10 ft Chain", "Chalk", "Chest", "Climber's Kit", "Clothes (Common)", "Clothes (Costume)", "Clothes (Fine)", "Clothes (Traveler's)", "Component Pouch",
"Crowbar", "Sprig of Mistletoe", "Totem", "Wooden Staff", "Yew Wand", "Fishing Tackle", "Flask (Empty)", "Grappling Hook", "Hammer", "Sledgehammer", "Medkit", "Amulet", "Emblem", "Reliquary",
"Flask (Holy Water)", "Hourglass", "Hunting Trap", "Vial (Ink)", "Ink Pen", "Jug (Empty)", "10 ft Ladder", "Lamp", "Bullseye Lantern", "Hooded Lantern", "Lock", "Magnifying Glass", "Manacles",
"Mess Kit", "Steel Mirror", "Flask (Oil)", "Paper", "Parchment", "Vial (Perfume)", "Pickaxe", "Piton", "Vial (Basic Poison)", "10 ft Pole", "Iron Pot", "Potion (Healing)", "Pouch", "Quiver",
"Portable Ram", "Rations", "Clothes (Robes)", "10 ft Rope", "Sack", "Merchant's Scale", "Sealing Wax", "Shovel", "Signal Whistle", "Signet Ring", "Soap", "Spellbook", "Iron Spike", "Spyglass",
"2-person Tent", "Tinderbox", "Torch", "Vial (Empty)", "Waterskin", "Whetstone", "Potion (Repairing)", "Game Die", "Playing Card Set", "Bagpipes", "Drum", "Dulcimer", "Flute", "Lute",
"Lyre", "Horn", "Pan Flute", "Shawn", "Viol", "Gem (Azurite)", "Gem (Quartz)", "Gem (Agate)", "Gem (Lapis Lazuli)", "Gem (Malachite)", "Gem (Obsidian)", "Gem (Bloodstone)", "Gem (Citrine)",
"Gem (Jasper)", "Gem (Moonstone)", "Gem (Onyx)", "Gem (Zircon)", "Gem (Amethyst)", "Gem (Garnet)", "Gem (Pearl)", "Gem (Spinel)", "Gem (Peridot)", "Gem (Sapphire)", "Gem (Emerald)",
"Gem (Ruby)", "Gem (Diamond)", "Copper Ring", "Silver Ring", "Gold Ring", "Platinum Ring", "Copper Amulet", "Silver Amulet", "Gold Amulet", "Platinum Amulet", "Gold Crown", "Silver Gauntlets",
"Platinum Trophy", "Copper Chains", "üöó Screwdriver", "üöó Glowstick", "üöó Lighter", "üöó Flashlight", "üöó Binoculars", "üöó Soldering Gun", "üöó 5 ft Copper Wire", "üöó Wire Cutters",
"üöó 5 cotton swabs", "üöó Glass beaker", "üöó Small Camera (Broken)", "üöó Small Camera (Unused)", "üöó Airhorn", "üöó Battery", "üöó Empty Briefcase", "üöó Fake ID", "üöó Fishing Tackle",
"üöó Handcuffs", "üöó Metal Detector", "üöó Pepper spray", "üöó Signal Flare", "üöó Stopwatch", "üöó USB Flash Drive", "üöó Wristwatch", "üöó 10 Zip-ties"];

const randomArmor = ["Light Armor (Padded)", "Light Armor (Leather)", "Light Armor (Studded Leather)", "Medium Armor (Hide)", "Medium Armor (Chain Shirt)", "Medium Armor (Scale Mail)",
"Medium Armor (Breastplate)", "Medium Armor (Halfplate)", "Heavy Armor (Ringmail)", "Heavy Armor (Chainmail)", "Heavy Armor (Splint)", "Heavy Armor (Plate)", "Shield",
"üöó Light Armor (Leather Jacket)", "üöó Light Armor (Undercover Vest)", "üöó Medium Armor (Tactical Vest)", "üöó Heavy Armor (Bulletproof Vest)", "üöó Riot Shield"];

const randomWeapons = ["Club", "Dagger", "Greatclub", "Handaxe", "Javelin", "Light Hammer", "Mace", "Quarterstaff", "Sickle", "Spear", "Light Crossbow", "Dart", "Shortbow", "Sling",
"Battleaxe", "Flail", "Glaive", "Greataxe", "Greatsword", "Halberd", "Lance", "Longsword", "Maul", "Morningstar", "Pike", "Rapier", "Scimitar", "Shortsword", "Trident", "War pick",
"Warhammer", "Whip", "Blowgun", "Hand Crossbow", "Heavy Crossbow", "Longbow", "Net", "üöó Baseball Bat", "üöó Baton", "üöó Brass Knuckles", "üöó Hunting Knife", "üöó Nunchaku",
"üöó Pocket Knife", "üöó Pistol", "üöó Revolver", "üöó Hunting Rifle", "üöó Taser", "üöó Chainsaw", "üöó Katana", "üöó Machine Gun (Light)", "üöó Sniper Rifle",
"üöó Shotgun", "üöó 10 Bullets"];

const randomTreasure = ["‚≠ê Potion of Full Recovery", "üåå Spell Scroll (5 uses)", "üåå Driftglobe", "üåå Bag of holding", "‚≠ê Greater Spell Scroll (7 uses)", "‚≠ê Adamantine Shield", 
"üåå Decanter of Endless Water", "üåå Alchemy Jug", "üåå Amulet of Health", "üåå Amulet of Proof against Detection and Location", "üåå Amulet of the Planes", "üåå Animated Shield", 
"üåå Arrow-Catching Shield", "üåå Arrow of Dragon Slaying", "üåå Arrow of Demon Slaying", "üåå Bag of Tricks", "üåå Belt of Dwarvenkind", "üåå Boots of Elvenkind", "üåå Boots of Levitation", 
"üåå Boots of Speed", "‚≠ê Unavoidable Dagger", "üåå Boots of the Winterlands", "üåå Bowl of Commanding Water Elementals", "üåå Bracers of Archery", "üåå Brazier of Commanding Fire Elementals",
"üåå Broom of Flying", "üåå Cap of Water Breathing", "üåå Cape of the Mountebank", "üåå Carpet of Flying", "üåå Censer of Controlling Air Elementals", "üåå Chime of Opening (10 uses)",
"üåå Cloak of Arachnida", "üåå Cloak of Displacement", "üåå Cloak of Elvenkind", "üåå Cloak of Invisibility", "üåå Cloak of Protection", "üåå Cloak of the Bat", "üåå Cloak of the Manta Ray",
"üåå Cube of Force", "üåå Dagger of Venom", "üåå Dancing Sword", "üåå Demon Armor", "üåå Dimensional Shackles", "üåå Defender", "üåå Dragon Slayer Sword", "üåå Dust of Disappearance",
"üåå Dust of Dryness", "üåå Dust of Sneezing and Choking", "üåå Dwarven Plate", "üåå Dwarven Thrower", "üåå Efreeti Chain", "üåå Elemental Gem (Air)", "üåå Elemental Gem (Earth)",
"üåå Elemental Gem (Fire)", "üåå Elemental Gem (Water)", "üåå Elixer of Health", "üåå Elven Chain", "üåå Eversmoking Bottle", "üåå Eyes of Charming", "üåå Eyes of Minute Seeing",
"üåå Eyes of the Eagle", "üåå Flame Tongue", "üåå Folding Boat", "üåå Frost Brand", "üåå Gauntlets of Ogre Power", "üåå Gem of Brightness", "üåå Gem of Seeing", "üåå Giant Slayer",
"üåå Gamoured Studded Leather", "üåå Gloves of Missile Snaring", "üåå Gloves of Swimming and Climbing", "üåå Gloves of Thievery", "üåå Goggles of Night", "üåå Hammer of Thunderbolts",
"üåå Hat of Disguise", "üåå Headband of Intellect", "üåå Helm of Comprehending Languages", "üåå Helm of Telepathy", "üåå Helm of Teleportation", "üåå Heward's Handy Haversack",
"üåå Holy Avenger", "üåå Horn of Blasting", "üåå Silver Horn of Valhalla", "üåå Horseshoes of a Zephyr", "üåå Horseshoes of Speed", "üåå Immovable Rod", "üåå Ioun Stone of Agility",
"üåå Ioun Stone of Awareness", "üåå Ioun Stone of Fortitude", "üåå Ioun Stone of Insight", "üåå Ioun Stone of Intellect", "üåå Ioun Stone of Leadership", "üåå Ioun Stone of Regeneration",
"üåå Ioun Stone of Strength", "üåå Ioun Stone of Sustenance", "üåå Iron Bands of Bilarro", "üåå Javelin of Lightning", "üåå Keoghtom's Ointment", "üåå Lantern of Revealing", "üåå Mace of Disruption",
"üåå Mace of Smiting", "üåå Mace of Terror", "üåå Mantle of Spell Resistance", "üåå Manual of Bodily Health", "üåå Manual of Gainful Exercise", "üåå Manual of Quickness of Action",
"üåå Mariner's Armor", "üåå Medallion of Thoughts", "üåå Necklace of Adaptation", "üåå Necklace of Fireballs", "üåå Necklace of Prayer Beads", "üåå Nine Lives Stealer", "üåå Oathbow",
"üåå Oil of Etherealness", "üåå Oil of Sharpness", "üåå Oil of Slipperiness", "üåå Pearl of Power", "üåå Periapt of Health", "üåå Periapt of Proof against Poison", "üåå Periapt of Wound Closure",
"üåå Philter of Love", "üåå Pipes of Haunting", "üåå Pipes of the Sewers", "üåå Portable Hole", "üåå Potion of Animal Friendship", "üåå Potion of Clairvoyance", "üåå Potion of Climbing",
"üåå Potion of Diminution", "üåå Potion of Fire Breath", "üåå Potion of Flying", "üåå Potion of Gaseous Form", "üåå Potion of Giant Strength", "üåå Potion of Growth", "üåå Potion of Heroism",
"üåå Potion of Invisibility", "üåå Vial of Invulnerability (3 turns)", "üåå Potion of Longevity", "üåå Potion of Mind Reading", "üåå Potion of Resistance", "üåå Potion of Speed", "üåå Potion of Vitality",
"üåå Potion of Water Breathing", "üåå Quiver of Ehlonna", "üåå Ring of Animal Influence", "üåå Ring of Djinni Summoning", "üåå Ring of Evasion", "üåå Ring of Feather Falling",
"üåå Ring of Free Action", "üåå Ring of Invisibility", "üåå Ring of Jumping", "üåå Ring of Mind Shielding", "üåå Ring of Protection", "üåå Ring of Regenration", "üåå Ring of Resistance",
"üåå Ring of Spell Storing", "üåå Ring of Swimming", "üåå Ring of Telekinesis", "üåå Ring of the Ram", "üåå Ring of Warmth", "üåå Ring of Water Walking", "üåå Ring of X-Ray Vision",
"üåå Robe of Eyes", "üåå Robe of Scintillating Colors", "üåå Rod of Absorption", "üåå Rod of Alertness", "üåå rod of the Pact Keeper", "üåå Rod of Rulership", "üåå Rope of Climbing",
"üåå Rope of Entanglement", "üåå Saddle of the Cavalier", "üåå Scimitar of Speed", "üåå Scroll of Protection", "üåå Sending Stones", "üåå Sentinal Shield", "üåå Slippers of Spider Climbing",
"üåå Sovereign Glue", "üåå Spellguard Shield", "üåå Staff of Charming", "üåå Staff of Fire", "üåå Staff of Frost", "üåå Staff of Healing", "üåå Staff of Striking", "üåå Staff of Swarming Insects",
"üåå Staff of the Adder", "üåå Staff of the Python", "üåå Staff of the Woodlands", "üåå Staff of Thunder and Lightning", "üåå Staff of Withering", "üåå Stone of Controlling Earth Elementals",
"üåå Stone of Good Luck", "üåå Sun Blade", "üåå Sword of Life Stealing", "üåå Sword of Sharpness", "üåå Sword of Wounding", "üåå Tentacle Rod", "üåå Tome of Clear Thought",
"üåå Tome of Leadership and Influence", "üåå Tome of Understanding", "üåå Trident of Fish Command", "üåå Universal Solvent", "üåå Vicious Weapon", "üåå Wand of Binding",
"üåå Wand of Enemy Detection", "üåå Wand of Fear", "üåå Wand of Fireballs", "üåå Wand of Lightning Bolts", "üåå Wand of Magic Detection", "üåå Wand of Magic Missiles", "üåå Wand of Paralysis",
"üåå Wand of Polymorph", "üåå Wand of Secrets", "üåå Wand of the War Mage", "üåå Wand of Web", "üåå Wand of Wonder", "üåå Weapon of Warning", "üåå Wind Fan", "üåå Winged Boots", "üåå Wings of Flying",
"üöó Computer (Laptop)", "üöó Computer (Smartphone)"];

const legendaryTreasure = ["üåå Armor of Invulnerability", "üåå Cubic Gate", "üåå Daen's Instant Fortress", "üåå Helm of Brilliance", "üåå Ring of Elemental Command","üåå Robe of Stars",
"üåå Rod of Lordly Might", "üåå Rod of Security", "üåå Sphere of Annihilation", "üåå Talismen of Pure Good", "üåå Talismen of Ultimate Evil", "üåå Well of Many Worlds"];

const weatherTemp = ["Normal Temperature for Biome/Season", "Colder than usual", "Warmer than usual"];

const weatherWind = ["No wind", "Slight breeze", "A little windy", "Decently windy", "Very windy", "Dangerously windy"];

const weatherClouds = ["No clouds", "Few clouds", "Partly cloudy", "Very cloudy", "Distant storm clouds", "Slighty rainy/snowy", "Moderately Rainy/Snowy", "Heavy Rain/Snow",
"Torrential Downpour/Blizzard (Automatic Very Windy)", "Light Thunderstorm (Automatic Decently Windy)", "Heavy Thunderstorm (Automatic Very Windy)", "Tornado Warning (Automatic Dangerously Windy)"];

const randomSpells = [];

const normalTraps = ["Spikefall", "Pitfall", "Poison cloud", "Magic missile from wall", "Magic missile from ceiling", "Acid from ceiling", "Room begins to flood", "Walls begin to close in",
"Ceiling begins to lower", "Spikes begin to emerge from walls", "Darts from walls", "Poison darts from walls", "All doors in the room lock up", "All doors lock + reroll",
"Monsters release from hidden doors", "Undead crawl out of the ground", "Statue comes to life as an enemy", "Loud alarm", "All magic in the room becomes disabled"];

const hardTraps = ["The room opens into a long hallway, a wall of spikes begins to chase the party", "The room opens into a lavapit with rickety platforms to jump over",
"All exits lock up and the room floods with water quickly", "An object in the room explodes violently", "Floor opens up and drops the party into a room with a powerful monster",
"Flamethrowers from the walls", "Magic seal slowly steals the life of the party", "An eye opens and petrifies any whose faces it can see", "Doppelgangars of the party appear to block the path"];

const ancientFeatures = ["Evidence of lost knowledge", "Inscrutable relics", "Ancient artistry or craft", "Preserved corpses or fossils", "Visions of this place in another time"];
const ancientDangers = ["Ancient trap (use trap generator)", "Hazardous architecture or terrain", "Blocked or broken path", "Object defended by guardian", "Ancient monster lost to time",
"Warnings of a long-buried danger", "Artifact of terrible meaning or power", "Disturbing evidence of ancient wrongs"];
const corruptedFeatures = ["Mystic focus or conduit", "Strange environmental disturbances", "Mystic runes or markings", "Blight or decay", "Evidence of a foul ritual"];
const corruptedDangers = ["Creature spawned from dark power", "Creature that controls dark power", "Corruption-inducing trap", "Revelations of a terrible truth", "Mystic trap or trigger",
"Mystic barrier or ward", "Illusions lead you astray (Perception check)", "Dark ritual in progress", "Lingering effects of a dark ritual"];
const fortifiedFeatures = ["Camp or quarters", "Guarded location", "Storage or repository", "Work or training area", "Command center"];
const fortifiedDangers = ["Patrolled area", "Guarded area", "Ambush! (Only if you've been made aware of before)", "Pets or tamed monsters", "Trap", "Alarm Trigger", "Nefarious plans revealed"];
const hallowedFeatures = ["Altar", "Offerings or atonements", "Religious relic or idol", "Consecrated ground", "Dwellings or gathering place"];
const hallowedDangers = ["Divine manifestations", "Embodiment of a god or myth", "Protective ward or barrier", "Prophecies of a dark fate"];
const hauntedFeatures = ["Tomb or burial site", "Spilled blood", "Dried blood or remains", "Unnatural mist or darkness", "Messages from beyond the grave", "Apparitions of a person or event"];
const hauntedDangers = ["Area haunted by entity", "Unsettling sounds or foreboding signs", "Entity attacks without warning", "Frightening visions", "The environment is used against you",
"Trickery leads you astray (Insight Check)", "Sudden, shocking manifestation"];
const infestedFeatures = ["Inhabited nest", "Abandoned nest", "Ravaged terrain or architecture", "Remains or carrion", "Hoarded food"];
const infestedDangers = ["Creatures swarm and attack", "Toxic environment", "Creature stalks you (Perception check)", "Creature blocks path", "Trap or snare", "Remains of a victim"];
const ravagedFeatures = ["Path of destruction", "Abandoned or ruined dwelling", "Untouched or preserved area", "Traces of what was lost", "Ill-fated victims"];
const ravagedDangers = ["Precarious", "Imminent collapse or destruction", "Path undermined", "Blocked or broken path", "Vestiges of a destructive force", "Unexpected environmental threat",
"Signs of a horrible fate"];
const wildFeatures = ["Creature's lair", "Territorial markings", "Impressive flora or fauna", "Hunting ground or watering hole", "Remains or carrion"];
const wildDangers = ["Hunting creature", "Sudden attack from creature", "Creature with unexpected abilities", "Creature protecting something", "Hazardous terrain", "Weather or environmental threat",
"Benign aspect becomes a threat", "Remains of a victim", "Ill-fated victim"];
const barrowFeatures = ["Burial chambers", "Maze of narrow passages", "Shrine", "Vault", "Offerings to the dead", "Statues", "Unburied remains", "Mass grave", "Exhumed corpses", "Transition into new domain"];
const barrowDangers = ["Guarded area", "Trap", "Death makes it's presence known", "Crumbling architecture", "Grave goods with hidden dangers"];
const cavernFeatures = ["Twisting passages", "Cramped caves", "Vast chamber", "Subterranean waterway", "Cave pool", "Natural bridge", "Towering stone formation", "Natural illumination",
"Dark pit", "Something unusual", "Mining area"];
const cavernDangers = ["Creature lair", "Cave-in", "Flooding", "Perilous climb or descent", "Fissure or sinkhole"];
const frozenCavernFeatures = ["Mazy of Icy Tunnels", "Glistening cave", "Vast chamber", "Frigid waterway", "Icy Pools", "Magnificent ice formations", "Forzen waterfall", "Deep crevasses",
"Discovery locked in the ice", "Something unusual"];
const frozenCavernDangers = ["Creature lair", "Fracturing ice", "Crumbling chasm", "Bitter chill", "Disorienting reflections"];
const pathFeatures = ["Winding mountain path", "Snowfield or glacial rocks", "River gorge", "Crashing waterfall", "Highland lake", "Forgotten cairn", "Bridge", "Overlook", "Camp or outpost",
"Something unusual"];
const pathDangers = ["Creature lair", "Perilous climb or descent", "Avalanche or rockslide", "Weather starts/stops"];
const ruinFeatures = ["Crumbling corridors and chambers", "Collapsed architecture", "Rubble-choked hall", "Courtyard", "Archive or library", "Broken statues or fading murals", "Preserved vault",
"Altar of forgotten gods", "Mausoleum", "Something unusual"];
const ruinDangers = ["Ancient mechanism or trap", "Collapsing wall or ceiling", "Blocked or broken passage", "Unstable floor above a new danger", "Ancient secrets best left buried"];
const seaCaveFeatures = ["Watery tunnels", "Eroded chamber", "Flooded chamber", "Vast chamber", "Dry passages", "Freshwater inlet", "Rocky island", "Watery debris", "Shipwreck or boat",
"Something unusual"];
const seaCaveDangers = ["Something lurks below", "Flooding", "Rushing current", "Claustrophobic squeeze"];
const marshFeatures = ["Narrow path through dank bog", "Stagnant waterway", "Flooded thicket", "Island of dry land", "Submerged discovery", "Preserved corpses", "Overgrown structure",
"Tall reeds", "Camp or outpost", "Something unusual"];
const marshDangers = ["Deep water blocks the path", "Toxic environment", "Concealing or disorienting mist (Constitution check)", "Hidden quagmire"];
const strongholdFeatures = ["Connecting passageways", "Barracks or commonquarters", "Large hall", "Workshop or library", "Command center", "Storage", "Kitchen", "Courtyard", "Treasury"];
const strongholdDangers = ["Blocked or guarded path", "Caught in the open", "Chokepoint", "Trap", "Alarm trigger"];
const darkWoodsFeatures = ["Dense thicket", "Overgrown path", "Waterway", "Clearing", "Elder Tree", "Brambles", "Overgrown structure", "Rocky outcrop", "Camp or outpost", "Something unexpected"];
const darkWoodsDangers = ["Creature lair", "Trap or snare", "Path leads you astray", "Entangling plants"];
const underDungeonFeatures = ["Carved passages", "Hall or Chamber", "Stairs into the depths", "Grand doorway or entrance", "Tomb or catacombs", "Rough-hewn cave", "Foundry or workshop",
"Shrine", "Imposing architecture or artistry", "Something unusual"];
const underDungeonDangers = ["Ancient mechanism or trap", "Crumbling architecture", "Blocked or broken passage", "Artifact with a hidden danger", "Hidden monster"];
const magmaFeatures = ["Exposed ore", "Cooled chamber", "Obsidian pillars", "Charred remains", "Lavafall", "Something unusual"];
const magmaDangers = ["Lavaflow", "Rigid terrain", "Unstable ground", "Extremely hot area", "Path blocked by hot stones"];
const sunkenFeatures = ["Flooded halls", "Dry passages", "Ancient architecture", "Fully submerged room", "Old relics", "Something unusual"];
const sunkenDangers = ["Creature lair", "Blocked or broken passage", "Brittle architecture", "Something lurks beneath"];
const skyboundFeatures = ["Floating objects", "Network of bridges", "Lightened gravity", "Round room", "Otherworldly writings"];
const skyboundDangers = ["Endless pitfall", "Cloudy room (Perception check)", "Area of reversed gravity", "Moving platforms", "3 dimensional trap"];
const otherworldlyFeatures = ["Large alien plantlife", "Bridges made of strange energy", "Small floating islands or platforms", "Otherworldly writings", "Twisted and confusing architecture",
"A portal to a random nearby location (DM's discression)", "Area of layered ledges or cliffs", "Geyser of energy that launches things upward", "Area of otherworldly energy and presence",
"Altered gravity"];
const otherworldlyDangers = ["Area of crushing gravity", "Area twists and turns as if it were alive", "Invisible walls", "Rogue portal transports you elsewhere nearby (DM's discression)",
"Unstable terrain", "Otherworldly creature's lair"];
const technologicalFeatures = ["Holographic images floating around the area", "Screens display strange text", "Loud machines", "Security cameras", "Conveyor belts line the floor",
"A network of catwalks", "Glass walls peering into another room", "Server room"];
const technologicalDangers = ["Laser trap", "Grinding machine at the bottom of a pit", "Alarm", "Electric poles line the room", "Loose wires", "Spilled chemicals"];

var domainType = 10;

(function newFact() {
    var randomFact = Math.floor(Math.random() * randomQuote.length);
    document.getElementById('factDisplay').innerHTML = randomQuote[randomFact];
  })();
// ---------- FUNCTIONS ----------

// Copy window text to clipboard
function copytext() {
    var range = document.createRange();
    range.selectNode(document.getElementById("gen-text"));
    window.getSelection().removeAllRanges();
    window.getSelection().addRange(range);
    document.execCommand("copy");
    window.getSelection().removeAllRanges();
};

// Oracle
function oracle() {
    var OracleSays = OracleList[Math.floor(Math.random()*OracleList.length)];
    document.getElementById("main-text").innerText = `The Oracle says: ${OracleSays}`;
};

// Intervention
function intervent() {
    var InterventResults = Interventions[Math.floor(Math.random()*Interventions.length)];
    document.getElementById("main-text").innerText = InterventResults;
}

// Random Word Generator
function rwg() {
    var rwgActFinal = rwgAction[Math.floor(Math.random()*rwgAction.length)];
    var rwgSubFinal = rwgSubject[Math.floor(Math.random()*rwgSubject.length)];
    document.getElementById("main-text").innerText = `RWG Action & Subject: ${rwgActFinal}, ${rwgSubFinal}`;
}

// Expectations
function expect() {
    var expectResults = Expects[Math.floor(Math.random()*Expects.length)];
    document.getElementById("main-text").innerText = expectResults;
}

// Dungeon Biome Setting - DEPRECATED
function assholes() {
    var value = e.value;
    if (value === "volcanic") {
        dungeonSetting = "volcanic";
        console.log(dungeonSetting);
    } else if (value === "ice") {
        dungeonSetting = "ice";
        console.log(dungeonSetting);
    } else if (value === "desert") {
        dungeonSetting = "desert";
        console.log(dungeonSetting);
    } else if (value === "water") {
        dungeonSetting = "water";
        console.log(dungeonSetting);
    } else if (value === "none") {
        dungeonSetting = "none";
        console.log(dungeonSetting);
    }
}

// Perception Check
function perception() {
    var rngResult = randomNumber(1, 15);

    if (confirm("Perception: " + rngResult + ". Did you pass?")) {
        var whichDiscovery = randomNumber(1, 4);

        if (whichDiscovery === 1) {
            var coinType = randomNumber(1, 3);
            if (coinType === 1) {
                var coinAmount = randomNumber(1, 500);
                document.getElementById("main-text").innerText = "üí∞ You found " + coinAmount + " copper coins!";
            } else if (coinType === 2) {
                var coinAmount = randomNumber(1, 100);
                document.getElementById("main-text").innerText = "üí∞ You found " + coinAmount + " silver coins!";
            } else if (coinType === 3) {
                var coinAmount = randomNumber(1, 5);
                document.getElementById("main-text").innerText = "üí∞ You found " + coinAmount + " gold coins!";
            }
        } else if (whichDiscovery === 2) {
            document.getElementById("main-text").innerText = "üóø You found an item! (Use random item generation)";
        } else if (whichDiscovery === 3) {
            var discoveredHiddens = hiddenPois[Math.floor(Math.random()*hiddenPois.length)];
            document.getElementById("main-text").innerText = "üëÅ Discovered hidden point of interest: " + discoveredHiddens;
        } else if (whichDiscovery === 4) {
            document.getElementById("main-text").innerText = "‚ò† You discovered a trap! (Use random trap generator)";
        }

        console.log(rngResult);
        console.log("Success");

    } else {
        window.alert("You did not discover anything.");
    }
}

// Trap Detection
function trap() {
    var trapCheck = randomNumber(1,15);
    if (trapCheck === 15) {
        document.getElementById("main-text").innerText = "Were you hit by a hidden trap? üíÄ YES! (Use random trap generator)";
        console.log(trapCheck);
    } else {
        document.getElementById("main-text").innerText = "Were you hit by a hidden trap? Nope.";
        console.log(trapCheck);
    }
}

// Journey Length
function journeygen() {
    var journeyDays = randomNumber(1, 3);
    var destinationArrive = randomNumber(0, 3);
    var travelResults = travelBiomes[Math.floor(Math.random()*travelBiomes.length)];
    var tempResults = weatherTemp[Math.floor(Math.random()*weatherTemp.length)];
    var windResults = weatherWind[Math.floor(Math.random()*weatherWind.length)];
    var cloudResults = weatherClouds[Math.floor(Math.random()*weatherClouds.length)];

    if (destinationArrive === 1) {
        var destinationSuccess = "You'll reach your destination at this checkpoint.";
    } else {
        var destinationSuccess = "Take another journey to the next checkpoint.";
    };

    // Print
    document.getElementById("gen-text").innerText = `üê´ Days until next checkpoint: ${journeyDays}
    üóæ Destination status: ${destinationSuccess}
    üå≥ Traveled Biome: ${travelResults}
    
    Journey Weather:
    üåû Temperature: ${tempResults}
    üí® Wind: ${windResults}
    ‚õÖ Clouds: ${cloudResults}`
}

// A shit ton of domains holy fuck
function domainAncient() {
    globalThis.domainType = 1;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainCorrupted() {
    globalThis.domainType = 2;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainFortified() {
    globalThis.domainType = 3;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainHallowed() {
    globalThis.domainType = 4;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainHaunted() {
    globalThis.domainType = 5;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainInfested() {
    globalThis.domainType = 6;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainRavaged() {
    globalThis.domainType = 7;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainWild() {
    globalThis.domainType = 8;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainBarrow() {
    globalThis.domainType = 9;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainCavern() {
    globalThis.domainType = 10;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainFrozenCavern() {
    globalThis.domainType = 11;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainPass() {
    globalThis.domainType = 14;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainRuin() {
    globalThis.domainType = 15;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainSeaCave() {
    globalThis.domainType = 16;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainMarsh() {
    globalThis.domainType = 17;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainStronghold() {
    globalThis.domainType = 18;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainDarkWoods() {
    globalThis.domainType = 19;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainUnderDungeon() {
    globalThis.domainType = 20;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainMagma() {
    globalThis.domainType = 21;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainSunken() {
    globalThis.domainType = 22;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainSkybound() {
    globalThis.domainType = 23;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainOtherworldly() {
    globalThis.domainType = 24;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}
function domainTechnological() {
    globalThis.domainType = 25;
    document.getElementById("main-text").innerText = `Domain set to ID ${domainType}`
    console.log(domainType);
}

// Room Generation
function genroom() {
    var gridX = randomNumber(1, 15);
    var gridY = randomNumber(1, 15);
    var monsterChance = randomNumber(1,5);
    var dangerChance = randomNumber(1, 8);
    var treasureChance = randomNumber(1, 10);
    var upstairsChance = randomNumber(1, 8);
    var downstairsChance = randomNumber(1, 8);
    var bossChance = randomNumber(1, 25);
    var poiChance = randomNumber(1, 3);
    var poiCount = randomNumber(1, 3);
    var dungeonSetting = null;
    // Shit ton of domain things randomized. F = feature, D = danger.
    var ancientResF = ancientFeatures[Math.floor(Math.random()*ancientFeatures.length)];
    var ancientResD = ancientDangers[Math.floor(Math.random()*ancientDangers.length)];
    var corruptedResF = corruptedFeatures[Math.floor(Math.random()*corruptedFeatures.length)];
    var corruptedResD = corruptedDangers[Math.floor(Math.random()*corruptedDangers.length)];
    var fortifiedResF = fortifiedFeatures[Math.floor(Math.random()*fortifiedFeatures.length)];
    var fortifiedResD = fortifiedDangers[Math.floor(Math.random()*fortifiedDangers.length)];
    var hallowedResF = hallowedFeatures[Math.floor(Math.random()*hallowedFeatures.length)];
    var hallowedResD = hallowedDangers[Math.floor(Math.random()*hallowedDangers.length)];
    var hauntedResF = hauntedFeatures[Math.floor(Math.random()*hauntedFeatures.length)];
    var hauntedResD = hauntedDangers[Math.floor(Math.random()*hauntedDangers.length)];
    var infestedResF = infestedFeatures[Math.floor(Math.random()*infestedFeatures.length)];
    var infestedResD = infestedDangers[Math.floor(Math.random()*infestedDangers.length)];
    var ravagedResF = ravagedFeatures[Math.floor(Math.random()*ravagedFeatures.length)];
    var ravagedResD = ravagedDangers[Math.floor(Math.random()*ravagedDangers.length)];
    var wildResF = wildFeatures[Math.floor(Math.random()*wildFeatures.length)];
    var wildResD = wildDangers[Math.floor(Math.random()*wildDangers.length)];
    var barrowResF = barrowFeatures[Math.floor(Math.random()*barrowFeatures.length)];
    var barrowResD = barrowDangers[Math.floor(Math.random()*barrowDangers.length)];
    var cavernResF = cavernFeatures[Math.floor(Math.random()*cavernFeatures.length)];
    var cavernResD = cavernDangers[Math.floor(Math.random()*cavernDangers.length)];
    var frozenResF = frozenCavernFeatures[Math.floor(Math.random()*frozenCavernFeatures.length)];
    var frozenResD = frozenCavernDangers[Math.floor(Math.random()*frozenCavernDangers.length)];
    var pathResF = pathFeatures[Math.floor(Math.random()*pathFeatures.length)];
    var pathResD = pathDangers[Math.floor(Math.random()*pathDangers.length)];
    var ruinResF = ruinFeatures[Math.floor(Math.random()*ruinFeatures.length)];
    var ruinResD = ruinDangers[Math.floor(Math.random()*ruinDangers.length)];
    var seaResF = seaCaveFeatures[Math.floor(Math.random()*seaCaveFeatures.length)];
    var seaResD = seaCaveDangers[Math.floor(Math.random()*seaCaveDangers.length)];
    var marshResF = marshFeatures[Math.floor(Math.random()*marshFeatures.length)];
    var marshResD = marshDangers[Math.floor(Math.random()*marshDangers.length)];
    var strongholdResF = strongholdFeatures[Math.floor(Math.random()*strongholdFeatures.length)];
    var strongholdResD = strongholdDangers[Math.floor(Math.random()*strongholdDangers.length)];
    var darkResF = darkWoodsFeatures[Math.floor(Math.random()*darkWoodsFeatures.length)];
    var darkResD = darkWoodsDangers[Math.floor(Math.random()*darkWoodsDangers.length)];
    var underResF = underDungeonFeatures[Math.floor(Math.random()*underDungeonFeatures.length)];
    var underResD = underDungeonDangers[Math.floor(Math.random()*underDungeonDangers.length)];
    var magmaResF = magmaFeatures[Math.floor(Math.random()*magmaFeatures.length)];
    var magmaResD = magmaDangers[Math.floor(Math.random()*magmaDangers.length)];
    var sunkenResF = sunkenFeatures[Math.floor(Math.random()*sunkenFeatures.length)];
    var sunkenResD = sunkenDangers[Math.floor(Math.random()*sunkenDangers.length)];
    var skyboundResF = skyboundFeatures[Math.floor(Math.random()*skyboundFeatures.length)];
    var skyboundResD = skyboundDangers[Math.floor(Math.random()*skyboundDangers.length)];
    var otherResF = otherworldlyFeatures[Math.floor(Math.random()*otherworldlyFeatures.length)];
    var otherResD = otherworldlyDangers[Math.floor(Math.random()*otherworldlyDangers.length)];
    var techResF = technologicalFeatures[Math.floor(Math.random()*technologicalFeatures.length)];
    var techResD = technologicalDangers[Math.floor(Math.random()*technologicalDangers.length)];

    if (dangerChance === 1) {
        if (domainType === 1) {
            var dangerFinal = ancientResD;
        }
        if (domainType === 2) {
            var dangerFinal = corruptedResD;
        }
        if (domainType === 3) {
            var dangerFinal = fortifiedResD;
        }
        if (domainType === 4) {
            var dangerFinal = hallowedResD;
        }
        if (domainType === 5) {
            var dangerFinal = hauntedResD;
        }
        if (domainType === 6) {
            var dangerFinal = infestedResD;
        }
        if (domainType === 7) {
            var dangerFinal = ravagedResD;
        }
        if (domainType === 8) {
            var dangerFinal = wildResD;
        }
        if (domainType === 9) {
            var dangerFinal = barrowResD;
        }
        if (domainType === 10) {
            var dangerFinal = cavernResD;
        }
        if (domainType === 11) {
            var dangerFinal = frozenResD;
        }
        if (domainType === 14) {
            var dangerFinal = pathResD;
        }
        if (domainType === 15) {
            var dangerFinal = ruinResD;
        }
        if (domainType === 16) {
            var dangerFinal = seaResD;
        }
        if (domainType === 17) {
            var dangerFinal = marshResD;
        }
        if (domainType === 18) {
            var dangerFinal = strongholdResD;
        }
        if (domainType === 19) {
            var dangerFinal = darkResD;
        }
        if (domainType === 20) {
            var dangerFinal = underResD;
        }
        if (domainType === 21) {
            var dangerFinal = magmaResD;
        }
        if (domainType === 22) {
            var dangerFinal = sunkenResD;
        }
        if (domainType === 23) {
            var dangerFinal = skyboundResD;
        }
        if (domainType === 24) {
            var dangerFinal = otherResD;
        }
        if (domainType === 25) {
            var dangerFinal = techResD;
        }
    } else {
        dangerFinal = "None.";
    };

    if (gridX >= 3 && gridY >= 3) {
        var doorAccess = true;
    } else {
        var doorAccess = false;
    }

    if (doorAccess === true) {
        var northDoors = randomNumber(0, 2);
        var eastDoors = randomNumber(0, 2);
        var southDoors = randomNumber(0, 2);
        var westDoors = randomNumber(0, 2);
        var doorFinal = `North Doors: ${northDoors}, East Doors: ${eastDoors}, South Doors: ${southDoors}, West Doors: ${westDoors}`
    } else {
        var doorFinal = "No doors"
    }

    if (bossChance === 25) {
        var bossFinal = "‚ö† This is a boss room!";
    } else {
        var bossFinal = "(No boss).";
    }

    if (monsterChance === 5) {
        var monsterFinal = "üëπ Yes.";
    } else {
        var monsterFinal = "üôä No."
    }

    if (upstairsChance === 8) {
        var upstFinal = "‚Üó There is a staircase leading up.";
    } else {
        var upstFinal = "No stairs leading up.";
    }
    if (downstairsChance === 8) {
        var dnstFinal = "‚Üò There is a staircase leading down.";
    } else {
        var dnstFinal = "No stairs leading down.";
    }
    if (treasureChance === 10) {
        var treasureFinal = "ü•á There is visible treasure in the room!"
    } else {
        var treasureFinal = "No visible treasure."
    }

    // The print - OLD VER
    // document.getElementById("gen-text").innerText = `üëπ Boss Result: ${bossFinal}
    // üìè Room Width: ${gridX}
    // üìè Room Height: ${gridY}
    // üö™ Doors: ${doorFinal}
    // üí¨ Points of Interest: ${poiFinal}
    // üëø Monsters: ${monsterFinal}
    // üî• Generic Dangers: ${genDanFinal}
    // üìà Upstairs: ${upstFinal}
    // üìà Downstairs: ${dnstFinal}
    // ü•á Treasure: ${treasureFinal}`;

    if (domainType === 1) {
        document.getElementById("gen-text").innerText = `Domain: Ancient
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${ancientResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 2) {
        document.getElementById("gen-text").innerText = `Domain: Corrupted
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${corruptedResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 3) {
        document.getElementById("gen-text").innerText = `Domain: Fortified
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${fortifiedResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 4) {
        document.getElementById("gen-text").innerText = `Domain: Hallowed
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${hallowedResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 5) {
        document.getElementById("gen-text").innerText = `Domain: Haunted
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${hauntedResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 6) {
        document.getElementById("gen-text").innerText = `Domain: Infested
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${infestedResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 7) {
        document.getElementById("gen-text").innerText = `Domain: Ravaged
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${ravagedResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 8) {
        document.getElementById("gen-text").innerText = `Domain: Wild
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${wildResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 9) {
        document.getElementById("gen-text").innerText = `Domain: Barrow
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${barrowResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 10) {
        document.getElementById("gen-text").innerText = `Domain: Cavern
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${cavernResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 11) {
        document.getElementById("gen-text").innerText = `Domain: Frozen Cave
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${frozenResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 14) {
        document.getElementById("gen-text").innerText = `Domain: Mountain Path
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${pathResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 15) {
        document.getElementById("gen-text").innerText = `Domain: Ruin
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${ruinResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 16) {
        document.getElementById("gen-text").innerText = `Domain: Sea Cave
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${seaResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 17) {
        document.getElementById("gen-text").innerText = `Domain: Marsh
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${marshResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 18) {
        document.getElementById("gen-text").innerText = `Domain: Stronghold
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${strongholdResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 19) {
        document.getElementById("gen-text").innerText = `Domain: Dark Woods
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${darkResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 20) {
        document.getElementById("gen-text").innerText = `Domain: Under Dungeon
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${underResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 21) {
        document.getElementById("gen-text").innerText = `Domain: Magma
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${magmaResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 22) {
        document.getElementById("gen-text").innerText = `Domain: Sunken City
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${corruptedResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 23) {
        document.getElementById("gen-text").innerText = `Domain: Skybound
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${skyboundResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 24) {
        document.getElementById("gen-text").innerText = `Domain: Otherworldly
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${otherResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    } else if (domainType === 25) {
        document.getElementById("gen-text").innerText = `Domain: Technological
        üëπ Boss Result: ${bossFinal}
        üìè Room Width: ${gridX}
        üìè Room Height: ${gridY}
        üö™ Doors: ${doorFinal}
        üóø Domain Feature: ${techResF}
        ü¶Ç Domain Dangers: ${dangerFinal}
        üëø Monsters: ${monsterFinal}
        üìà Upstairs: ${upstFinal}
        üìà Downstairs: ${dnstFinal}
        ü•á Treasure: ${treasureFinal}`;
    }
    
}

// Town Generation
function gentown() {
    var calamityChance = randomNumber(1, 5);
    var townSizeFinal = townSizeList[Math.floor(Math.random()*townSizeList.length)];
    var raceRelFinal = raceRelations[Math.floor(Math.random()*raceRelations.length)];
    var rulerFinal = rulerStatus[Math.floor(Math.random()*rulerStatus.length)];
    var notableFinal = notableTraits[Math.floor(Math.random()*notableTraits.length)];
    var knownFor = knownBy[Math.floor(Math.random()*knownBy.length)];

    if (calamityChance === 5) {
        var calamityFinal = calamities[Math.floor(Math.random()*calamities.length)];
    } else {
        var calamityFinal = "None"
    }

    // The print
    document.getElementById("gen-text").innerText = `üìê Town Size: ${townSizeFinal}
    üëÄ Race Relations: ${raceRelFinal}
    üëë Ruler's Status: ${rulerFinal}
    üåä Notable Traits: ${notableFinal}
    üç∫ Known for: ${knownFor}
    üåã Current Calamity: ${calamityFinal}`;
}

// Settlement Generation
function genstructure() {
    var structureType = randomNumber(1, 5)
    if (structureType === 1) {
        var residenceFinal = residences[Math.floor(Math.random()*residences.length)];
        document.getElementById("gen-text").innerText = `üåÜ Settlement Type: üè† Residence
        üîπ Building Type: ${residenceFinal}`;
    } else if (structureType === 2) {
        var religiousFinal = religiouses[Math.floor(Math.random()*religiouses.length)];
        document.getElementById("gen-text").innerText = `üåÜ Settlement Type: üõê Religious Settlement
        üîπ Building Type: ${religiousFinal}`;
    } else if (structureType === 3) {
        var tavFinal = tavType[Math.floor(Math.random()*tavType.length)];
        var tavNFinal1 = tavName1[Math.floor(Math.random()*tavName1.length)];
        var tavNFinal2 = tavName2[Math.floor(Math.random()*tavName2.length)];
        document.getElementById("gen-text").innerText = `üåÜ Settlement Type: üç∫ Tavern
        üí¨ Tavern Name: ${tavNFinal1} ${tavNFinal2}
        üîπ Building Type: ${tavFinal}`;
    } else if (structureType === 4) {
        var wareFinal = warehouses[Math.floor(Math.random()*warehouses.length)];
        document.getElementById("gen-text").innerText = `üåÜ Settlement Type: üì¶ Warehouse
        üîπ Building Type: ${wareFinal}`;
    } else if (structureType === 5) {
        var shopFinal = shopTypes[Math.floor(Math.random()*shopTypes.length)];
        document.getElementById("gen-text").innerText = `üåÜ Settlement Type: üõí Shop/Service
        üîπ Building Type: ${shopFinal}`;
    } else {
        document.getElementById("gen-text").innerText = `üü• Error`;
    }
}

// NPC Generation
function npct() {
    var tudeResults = npcTude[Math.floor(Math.random()*npcTude.length)];
    var modifierResults = npcModifier[Math.floor(Math.random()*npcModifier.length)];
    var nounResults = npcNoun[Math.floor(Math.random()*npcNoun.length)];
    var motive1Results = rwgAction[Math.floor(Math.random()*rwgAction.length)];
    var motive2Results = rwgSubject[Math.floor(Math.random()*rwgSubject.length)];
    var powerResults = npcPowerLevel[Math.floor(Math.random()*npcPowerLevel.length)];
    var strengthResults = npcStrength[Math.floor(Math.random()*npcStrength.length)];
    var weaknessResults = npcWeakness[Math.floor(Math.random()*npcWeakness.length)];
    var focusResults = npcFocus[Math.floor(Math.random()*npcFocus.length)];
    var classResults = npcClasses[Math.floor(Math.random()*npcClasses.length)];
    var alignResults = alignment[Math.floor(Math.random()*alignment.length)];
    var visualResults = npcVisuals[Math.floor(Math.random()*npcVisuals.length)];

    var raceRNG = randomNumber(1, 3)
    if (raceRNG === 1 || raceRNG === 2) {
        var raceResult = npcCommonRaces[Math.floor(Math.random()*npcCommonRaces.length)];
    } else {
        var raceResult = npcRareRaces[Math.floor(Math.random()*npcRareRaces.length)];
    }

    // The print
    document.getElementById("gen-text").innerText = `üö• Personality Title: ${modifierResults} ${nounResults}
    üîé Feature: ${visualResults}
    üìú Motives: ${motive1Results}, ${motive2Results}
    üò∫ Race: ${raceResult}
    ü§∫ Class: ${classResults}
    üî• Power Level: ${powerResults}
    üí™ Strong Point: ${strengthResults}
    ü•∂ Weak Point: ${weaknessResults}
    ‚ùì Topic Focus: ${focusResults}
    ü§® Attitude: ${tudeResults}
    ‚ôé Alignment: ${alignResults}`;
}

// Random Overworld Biome
function travBiome() {
    var travelResults = travelBiomes[Math.floor(Math.random()*travelBiomes.length)];
    document.getElementById("main-text").innerText = travelResults;
}

// Random Cave Biome
function cavBiome() {
    var caveResults = caveBiomes[Math.floor(Math.random()*caveBiomes.length)];
    document.getElementById("main-text").innerText = caveResults;
}

// Weather thing
function weather() {
    var tempResults = weatherTemp[Math.floor(Math.random()*weatherTemp.length)];
    var windResults = weatherWind[Math.floor(Math.random()*weatherWind.length)];
    var cloudResults = weatherClouds[Math.floor(Math.random()*weatherClouds.length)];

    document.getElementById("gen-text").innerText = `üåû Temperature: ${tempResults}
    üí® Wind: ${windResults}
    ‚õÖ Clouds: ${cloudResults}`;
}

// Random item
function genItem() {
    var itemResult = randomItems[Math.floor(Math.random()*randomItems.length)];
    document.getElementById("main-text").innerText = itemResult;
}

// Random weapon
function genWeapon() {
    var weaponResult = randomWeapons[Math.floor(Math.random()*randomWeapons.length)];
    document.getElementById("main-text").innerText = weaponResult;
}

// Random armor
function genArmor() {
    var armorResult = randomArmor[Math.floor(Math.random()*randomArmor.length)];
    document.getElementById("main-text").innerText = armorResult;
}

// Random treasure
function genTreasure() {
    var treasureResult = randomTreasure[Math.floor(Math.random()*randomTreasure.length)];
    document.getElementById("main-text").innerText = treasureResult;
}

// Easy Traps
function easyTrap() {
    var etrapResult = normalTraps[Math.floor(Math.random()*normalTraps.length)];
    document.getElementById("main-text").innerText = etrapResult;
}

// Hard Traps
function deadlyTrap() {
    var htrapResult = hardTraps[Math.floor(Math.random()*hardTraps.length)];
    document.getElementById("main-text").innerText = htrapResult;
}

// Normal Boss Loot
function easyBoss() {
    var weaponChance = randomNumber(1, 5);
    var armorChance = randomNumber(1, 5);
    var bossGold = randomNumber(5, 500);
    var bossItem1 = randomItems[Math.floor(Math.random()*randomItems.length)];
    var bossItem2 = randomItems[Math.floor(Math.random()*randomItems.length)];
    var bossItem3 = randomItems[Math.floor(Math.random()*randomItems.length)];
    var bossTreasure = randomTreasure[Math.floor(Math.random()*randomTreasure.length)];

    if (weaponChance === 5) {
        bossWeapon = randomWeapons[Math.floor(Math.random()*randomWeapons.length)];
    } else {
        bossWeapon = "None"
    }

    if (armorChance === 5) {
        bossArmor = randomArmor[Math.floor(Math.random()*randomArmor.length)];
    } else {
        bossArmor = "None"
    }

    document.getElementById("gen-text").innerText = `üëõ Gold: ${bossGold}
    üèÜ Items: ${bossItem1}, ${bossItem2}, ${bossItem3}
    ü§ñ Armor: ${bossArmor}
    ü§∫ Weapon: ${bossWeapon}
    üéÅ Treasure: ${bossTreasure}`;
}

// Hard Boss Loot
function hardBoss() {
    var weaponChance = randomNumber(1, 2);
    var armorChance = randomNumber(1, 2);
    var bossGold = randomNumber(5, 1500);
    var bossItem1 = randomItems[Math.floor(Math.random()*randomItems.length)];
    var bossItem2 = randomItems[Math.floor(Math.random()*randomItems.length)];
    var bossItem3 = randomItems[Math.floor(Math.random()*randomItems.length)];
    var bossItem4 = randomItems[Math.floor(Math.random()*randomItems.length)];
    var bossTreasure = randomTreasure[Math.floor(Math.random()*randomTreasure.length)];
    var bossTreasure2 = randomTreasure[Math.floor(Math.random()*randomTreasure.length)];

    if (weaponChance === 2) {
        bossWeapon = randomWeapons[Math.floor(Math.random()*randomWeapons.length)];
    } else {
        bossWeapon = "None"
    }

    if (armorChance === 2) {
        bossArmor = randomArmor[Math.floor(Math.random()*randomArmor.length)];
    } else {
        bossArmor = "None"
    }

    document.getElementById("gen-text").innerText = `üëõ Gold: ${bossGold}
    üèÜ Items: ${bossItem1}, ${bossItem2}, ${bossItem3}, ${bossItem4}
    ü§ñ Armor: ${bossArmor}
    ü§∫ Weapon: ${bossWeapon}
    üéÅ Treasure: ${bossTreasure}, ${bossTreasure2}`;
}

// Legendary Boss Loot
function mythBoss() {
    var weaponChance = randomNumber(1, 2);
    var armorChance = randomNumber(1, 2);
    var bossGold = randomNumber(5, 5000);
    var bossItem1 = randomItems[Math.floor(Math.random()*randomItems.length)];
    var bossItem2 = randomItems[Math.floor(Math.random()*randomItems.length)];
    var bossItem3 = randomItems[Math.floor(Math.random()*randomItems.length)];
    var bossItem4 = randomItems[Math.floor(Math.random()*randomItems.length)];
    var bossTreasure = randomTreasure[Math.floor(Math.random()*randomTreasure.length)];
    var bossTreasure2 = randomTreasure[Math.floor(Math.random()*randomTreasure.length)];
    var bossLegend = legendaryTreasure[Math.floor(Math.random()*legendaryTreasure.length)];

    if (weaponChance === 2) {
        bossWeapon = randomWeapons[Math.floor(Math.random()*randomWeapons.length)];
    } else {
        bossWeapon = "None"
    }

    if (armorChance === 2) {
        bossArmor = randomArmor[Math.floor(Math.random()*randomArmor.length)];
    } else {
        bossArmor = "None"
    }

    document.getElementById("gen-text").innerText = `üëõ Gold: ${bossGold}
    üèÜ Items: ${bossItem1}, ${bossItem2}, ${bossItem3}, ${bossItem4}
    ü§ñ Armor: ${bossArmor}
    ü§∫ Weapon: ${bossWeapon}
    üéÅ Treasure: ${bossTreasure}, ${bossTreasure2}
    üåü Legendary Prize: ${bossLegend}`;
}

// Test Buttons